/*
* generated by Xtext
*/
grammar InternalESCG;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package com.b2international.snowowl.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.b2international.snowowl.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.b2international.snowowl.dsl.services.ESCGGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private ESCGGrammarAccess grammarAccess;
 	
    public InternalESCGParser(TokenStream input, ESCGGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	}
   	
   	@Override
   	protected ESCGGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getSubExpressionSubExpressionParserRuleCall_0_0()); 
	    }
		lv_subExpression_0_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpression",
        		lv_subExpression_0_0, 
        		"SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_UNION_TOKEN_1=RULE_UNION_TOKEN
    { 
    newLeafNode(this_UNION_TOKEN_1, grammarAccess.getExpressionAccess().getUNION_TOKENTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getSubExpressionSubExpressionParserRuleCall_1_1_0()); 
	    }
		lv_subExpression_2_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpression",
        		lv_subExpression_2_0, 
        		"SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getLValuesLValueParserRuleCall_0_0()); 
	    }
		lv_lValues_0_0=ruleLValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		add(
       			$current, 
       			"lValues",
        		lv_lValues_0_0, 
        		"LValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PLUS_SIGN_1=RULE_PLUS_SIGN
    { 
    newLeafNode(this_PLUS_SIGN_1, grammarAccess.getSubExpressionAccess().getPLUS_SIGNTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getLValuesLValueParserRuleCall_1_1_0()); 
	    }
		lv_lValues_2_0=ruleLValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		add(
       			$current, 
       			"lValues",
        		lv_lValues_2_0, 
        		"LValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_COLON_3=RULE_COLON
    { 
    newLeafNode(this_COLON_3, grammarAccess.getSubExpressionAccess().getCOLONTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getRefinementsRefinementsParserRuleCall_2_1_0()); 
	    }
		lv_refinements_4_0=ruleRefinements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		set(
       			$current, 
       			"refinements",
        		lv_refinements_4_0, 
        		"Refinements");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLValue
entryRuleLValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLValueRule()); }
	 iv_ruleLValue=ruleLValue 
	 { $current=$iv_ruleLValue.current; } 
	 EOF 
;

// Rule LValue
ruleLValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLValueAccess().getConceptGroupParserRuleCall_0()); 
    }
    this_ConceptGroup_0=ruleConceptGroup
    { 
        $current = $this_ConceptGroup_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLValueAccess().getRefSetParserRuleCall_1()); 
    }
    this_RefSet_1=ruleRefSet
    { 
        $current = $this_RefSet_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRefSet
entryRuleRefSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefSetRule()); }
	 iv_ruleRefSet=ruleRefSet 
	 { $current=$iv_ruleRefSet.current; } 
	 EOF 
;

// Rule RefSet
ruleRefSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_negated_0_0=RULE_NOT_TOKEN
		{
			newLeafNode(lv_negated_0_0, grammarAccess.getRefSetAccess().getNegatedNOT_TOKENTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"negated",
        		true, 
        		"NOT_TOKEN");
	    }

)
)?this_CARET_1=RULE_CARET
    { 
    newLeafNode(this_CARET_1, grammarAccess.getRefSetAccess().getCARETTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefSetAccess().getIdConceptIdParserRuleCall_2_0()); 
	    }
		lv_id_2_0=ruleConceptId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefSetRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"ConceptId");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PIPE_3=RULE_PIPE
    { 
    newLeafNode(this_PIPE_3, grammarAccess.getRefSetAccess().getPIPETerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefSetAccess().getTermTermParserRuleCall_3_1_0()); 
	    }
		lv_term_4_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefSetRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_4_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PIPE_5=RULE_PIPE
    { 
    newLeafNode(this_PIPE_5, grammarAccess.getRefSetAccess().getPIPETerminalRuleCall_3_2()); 
    }
)?)
;





// Entry rule entryRuleConceptGroup
entryRuleConceptGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptGroupRule()); }
	 iv_ruleConceptGroup=ruleConceptGroup 
	 { $current=$iv_ruleConceptGroup.current; } 
	 EOF 
;

// Rule ConceptGroup
ruleConceptGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_negated_0_0=RULE_NOT_TOKEN
		{
			newLeafNode(lv_negated_0_0, grammarAccess.getConceptGroupAccess().getNegatedNOT_TOKENTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConceptGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"negated",
        		true, 
        		"NOT_TOKEN");
	    }

)
)?(
(
(
		lv_constraint_1_1=RULE_SUBTYPE
		{
			newLeafNode(lv_constraint_1_1, grammarAccess.getConceptGroupAccess().getConstraintSUBTYPETerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConceptGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constraint",
        		lv_constraint_1_1, 
        		"SUBTYPE");
	    }

    |		lv_constraint_1_2=RULE_INCLUSIVE_SUBTYPE
		{
			newLeafNode(lv_constraint_1_2, grammarAccess.getConceptGroupAccess().getConstraintINCLUSIVE_SUBTYPETerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConceptGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constraint",
        		lv_constraint_1_2, 
        		"INCLUSIVE_SUBTYPE");
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConceptGroupAccess().getConceptConceptParserRuleCall_2_0()); 
	    }
		lv_concept_2_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptGroupRule());
	        }
       		set(
       			$current, 
       			"concept",
        		lv_concept_2_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	 iv_ruleConcept=ruleConcept 
	 { $current=$iv_ruleConcept.current; } 
	 EOF 
;

// Rule Concept
ruleConcept returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConceptAccess().getIdConceptIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleConceptId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ConceptId");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PIPE_1=RULE_PIPE
    { 
    newLeafNode(this_PIPE_1, grammarAccess.getConceptAccess().getPIPETerminalRuleCall_1_0()); 
    }
(this_WS_2=RULE_WS
    { 
    newLeafNode(this_WS_2, grammarAccess.getConceptAccess().getWSTerminalRuleCall_1_1()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConceptAccess().getTermTermParserRuleCall_1_2_0()); 
	    }
		lv_term_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_WS_4=RULE_WS
    { 
    newLeafNode(this_WS_4, grammarAccess.getConceptAccess().getWSTerminalRuleCall_1_3()); 
    }
)*this_PIPE_5=RULE_PIPE
    { 
    newLeafNode(this_PIPE_5, grammarAccess.getConceptAccess().getPIPETerminalRuleCall_1_4()); 
    }
)?)
;





// Entry rule entryRuleRefinements
entryRuleRefinements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefinementsRule()); }
	 iv_ruleRefinements=ruleRefinements 
	 { $current=$iv_ruleRefinements.current; } 
	 EOF 
;

// Rule Refinements
ruleRefinements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRefinementsAccess().getAttributeSetAttributeSetParserRuleCall_0_0_0()); 
	    }
		lv_attributeSet_0_0=ruleAttributeSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefinementsRule());
	        }
       		set(
       			$current, 
       			"attributeSet",
        		lv_attributeSet_0_0, 
        		"AttributeSet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRefinementsAccess().getAttributeGroupsAttributeGroupParserRuleCall_0_1_0()); 
	    }
		lv_attributeGroups_1_0=ruleAttributeGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefinementsRule());
	        }
       		add(
       			$current, 
       			"attributeGroups",
        		lv_attributeGroups_1_0, 
        		"AttributeGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRefinementsAccess().getAttributeGroupsAttributeGroupParserRuleCall_1_0()); 
	    }
		lv_attributeGroups_2_0=ruleAttributeGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefinementsRule());
	        }
       		add(
       			$current, 
       			"attributeGroups",
        		lv_attributeGroups_2_0, 
        		"AttributeGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleAttributeGroup
entryRuleAttributeGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeGroupRule()); }
	 iv_ruleAttributeGroup=ruleAttributeGroup 
	 { $current=$iv_ruleAttributeGroup.current; } 
	 EOF 
;

// Rule AttributeGroup
ruleAttributeGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPENING_CURLY_BRACKET_0=RULE_OPENING_CURLY_BRACKET
    { 
    newLeafNode(this_OPENING_CURLY_BRACKET_0, grammarAccess.getAttributeGroupAccess().getOPENING_CURLY_BRACKETTerminalRuleCall_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeGroupAccess().getAttributeSetParserRuleCall_1()); 
    }
    this_AttributeSet_1=ruleAttributeSet
    { 
        $current = $this_AttributeSet_1.current; 
        afterParserOrEnumRuleCall();
    }
this_CLOSING_CURLY_BRACKET_2=RULE_CLOSING_CURLY_BRACKET
    { 
    newLeafNode(this_CLOSING_CURLY_BRACKET_2, grammarAccess.getAttributeGroupAccess().getCLOSING_CURLY_BRACKETTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleAttributeSet
entryRuleAttributeSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeSetRule()); }
	 iv_ruleAttributeSet=ruleAttributeSet 
	 { $current=$iv_ruleAttributeSet.current; } 
	 EOF 
;

// Rule AttributeSet
ruleAttributeSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeSetAccess().getAttributesAttributeParserRuleCall_0_0()); 
	    }
		lv_attributes_0_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeSetRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_0_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getAttributeSetAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeSetAccess().getAttributesAttributeParserRuleCall_1_1_0()); 
	    }
		lv_attributes_2_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeSetRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_optional_0_0=RULE_OPTIONAL
		{
			newLeafNode(lv_optional_0_0, grammarAccess.getAttributeAccess().getOptionalOPTIONALTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"optional",
        		true, 
        		"OPTIONAL");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getAssignmentAttributeAssignmentParserRuleCall_1_0()); 
	    }
		lv_assignment_1_0=ruleAttributeAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"assignment",
        		lv_assignment_1_0, 
        		"AttributeAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeAssignment
entryRuleAttributeAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeAssignmentRule()); }
	 iv_ruleAttributeAssignment=ruleAttributeAssignment 
	 { $current=$iv_ruleAttributeAssignment.current; } 
	 EOF 
;

// Rule AttributeAssignment
ruleAttributeAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAssignmentAccess().getConceptAssignmentParserRuleCall_0()); 
    }
    this_ConceptAssignment_0=ruleConceptAssignment
    { 
        $current = $this_ConceptAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAssignmentAccess().getNumericalAssignmentParserRuleCall_1()); 
    }
    this_NumericalAssignment_1=ruleNumericalAssignment
    { 
        $current = $this_NumericalAssignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAssignmentAccess().getNumericalAssignmentGroupParserRuleCall_2()); 
    }
    this_NumericalAssignmentGroup_2=ruleNumericalAssignmentGroup
    { 
        $current = $this_NumericalAssignmentGroup_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConceptAssignment
entryRuleConceptAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptAssignmentRule()); }
	 iv_ruleConceptAssignment=ruleConceptAssignment 
	 { $current=$iv_ruleConceptAssignment.current; } 
	 EOF 
;

// Rule ConceptAssignment
ruleConceptAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConceptAssignmentAccess().getNameLValueParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleLValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptAssignmentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"LValue");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EQUAL_SIGN_1=RULE_EQUAL_SIGN
    { 
    newLeafNode(this_EQUAL_SIGN_1, grammarAccess.getConceptAssignmentAccess().getEQUAL_SIGNTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConceptAssignmentAccess().getValueRValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleRValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"RValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumericalAssignment
entryRuleNumericalAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalAssignmentRule()); }
	 iv_ruleNumericalAssignment=ruleNumericalAssignment 
	 { $current=$iv_ruleNumericalAssignment.current; } 
	 EOF 
;

// Rule NumericalAssignment
ruleNumericalAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentAccess().getNameConceptParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentAccess().getOperatorOperatorParserRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentAccess().getValueDecimalNumberParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleDecimalNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"DecimalNumber");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentAccess().getUnitUnitTypeParserRuleCall_3_0()); 
	    }
		lv_unit_3_0=ruleUnitType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_3_0, 
        		"UnitType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumericalAssignmentGroup
entryRuleNumericalAssignmentGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalAssignmentGroupRule()); }
	 iv_ruleNumericalAssignmentGroup=ruleNumericalAssignmentGroup 
	 { $current=$iv_ruleNumericalAssignmentGroup.current; } 
	 EOF 
;

// Rule NumericalAssignmentGroup
ruleNumericalAssignmentGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPENING_SQUARE_BRACKET_0=RULE_OPENING_SQUARE_BRACKET
    { 
    newLeafNode(this_OPENING_SQUARE_BRACKET_0, grammarAccess.getNumericalAssignmentGroupAccess().getOPENING_SQUARE_BRACKETTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentGroupAccess().getIngredientConceptConceptParserRuleCall_1_0()); 
	    }
		lv_ingredientConcept_1_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentGroupRule());
	        }
       		set(
       			$current, 
       			"ingredientConcept",
        		lv_ingredientConcept_1_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EQUAL_SIGN_2=RULE_EQUAL_SIGN
    { 
    newLeafNode(this_EQUAL_SIGN_2, grammarAccess.getNumericalAssignmentGroupAccess().getEQUAL_SIGNTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentGroupAccess().getSubstanceRValueParserRuleCall_3_0()); 
	    }
		lv_substance_3_0=ruleRValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentGroupRule());
	        }
       		set(
       			$current, 
       			"substance",
        		lv_substance_3_0, 
        		"RValue");
	        afterParserOrEnumRuleCall();
	    }

)
)this_COMMA_4=RULE_COMMA
    { 
    newLeafNode(this_COMMA_4, grammarAccess.getNumericalAssignmentGroupAccess().getCOMMATerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericalAssignmentGroupAccess().getNumericValueNumericalAssignmentParserRuleCall_5_0()); 
	    }
		lv_numericValue_5_0=ruleNumericalAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericalAssignmentGroupRule());
	        }
       		set(
       			$current, 
       			"numericValue",
        		lv_numericValue_5_0, 
        		"NumericalAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)this_CLOSING_SQUARE_BRACKET_6=RULE_CLOSING_SQUARE_BRACKET
    { 
    newLeafNode(this_CLOSING_SQUARE_BRACKET_6, grammarAccess.getNumericalAssignmentGroupAccess().getCLOSING_SQUARE_BRACKETTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleRValue
entryRuleRValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRValueRule()); }
	 iv_ruleRValue=ruleRValue 
	 { $current=$iv_ruleRValue.current; } 
	 EOF 
;

// Rule RValue
ruleRValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRValueAccess().getOrParserRuleCall()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)this_OR_TOKEN_2=RULE_OR_TOKEN
    { 
    newLeafNode(this_OR_TOKEN_2, grammarAccess.getOrAccess().getOR_TOKENTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndAccess().getTerminalRValueParserRuleCall_0()); 
    }
    this_TerminalRValue_0=ruleTerminalRValue
    { 
        $current = $this_TerminalRValue_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)this_AND_TOKEN_2=RULE_AND_TOKEN
    { 
    newLeafNode(this_AND_TOKEN_2, grammarAccess.getAndAccess().getAND_TOKENTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightTerminalRValueParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleTerminalRValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TerminalRValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNegatableSubExpression
entryRuleNegatableSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegatableSubExpressionRule()); }
	 iv_ruleNegatableSubExpression=ruleNegatableSubExpression 
	 { $current=$iv_ruleNegatableSubExpression.current; } 
	 EOF 
;

// Rule NegatableSubExpression
ruleNegatableSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_negated_0_0=RULE_NOT_TOKEN
		{
			newLeafNode(lv_negated_0_0, grammarAccess.getNegatableSubExpressionAccess().getNegatedNOT_TOKENTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNegatableSubExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"negated",
        		true, 
        		"NOT_TOKEN");
	    }

)
)?this_OPENING_ROUND_BRACKET_1=RULE_OPENING_ROUND_BRACKET
    { 
    newLeafNode(this_OPENING_ROUND_BRACKET_1, grammarAccess.getNegatableSubExpressionAccess().getOPENING_ROUND_BRACKETTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegatableSubExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegatableSubExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_CLOSING_ROUND_BRACKET_3=RULE_CLOSING_ROUND_BRACKET
    { 
    newLeafNode(this_CLOSING_ROUND_BRACKET_3, grammarAccess.getNegatableSubExpressionAccess().getCLOSING_ROUND_BRACKETTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleTerminalRValue
entryRuleTerminalRValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalRValueRule()); }
	 iv_ruleTerminalRValue=ruleTerminalRValue 
	 { $current=$iv_ruleTerminalRValue.current; } 
	 EOF 
;

// Rule TerminalRValue
ruleTerminalRValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_OPENING_ROUND_BRACKET_0=RULE_OPENING_ROUND_BRACKET
    { 
    newLeafNode(this_OPENING_ROUND_BRACKET_0, grammarAccess.getTerminalRValueAccess().getOPENING_ROUND_BRACKETTerminalRuleCall_0_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalRValueAccess().getRValueParserRuleCall_0_1()); 
    }
    this_RValue_1=ruleRValue
    { 
        $current = $this_RValue_1.current; 
        afterParserOrEnumRuleCall();
    }
this_CLOSING_ROUND_BRACKET_2=RULE_CLOSING_ROUND_BRACKET
    { 
    newLeafNode(this_CLOSING_ROUND_BRACKET_2, grammarAccess.getTerminalRValueAccess().getCLOSING_ROUND_BRACKETTerminalRuleCall_0_2()); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalRValueAccess().getNegatableSubExpressionParserRuleCall_1()); 
    }
    this_NegatableSubExpression_3=ruleNegatableSubExpression
    { 
        $current = $this_NegatableSubExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTerminalRValueAccess().getLValueParserRuleCall_2()); 
    }
    this_LValue_4=ruleLValue
    { 
        $current = $this_LValue_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Term
ruleTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTermCharacterParserRuleCall_0()); 
    }
    this_TermCharacter_0=ruleTermCharacter    {
		$current.merge(this_TermCharacter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+((    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    newLeafNode(this_WS_1, grammarAccess.getTermAccess().getWSTerminalRuleCall_1_0()); 
    }
)+(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTermCharacterParserRuleCall_1_1()); 
    }
    this_TermCharacter_2=ruleTermCharacter    {
		$current.merge(this_TermCharacter_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConceptId
entryRuleConceptId returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getConceptIdRule()); } 
	 iv_ruleConceptId=ruleConceptId 
	 { $current=$iv_ruleConceptId.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ConceptId
ruleConceptId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_NONZERO_0=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_0);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_0, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_0()); 
    }
(    this_DIGIT_NONZERO_1=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_1);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_1, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_1_0()); 
    }

    |    this_ZERO_2=RULE_ZERO    {
		$current.merge(this_ZERO_2);
    }

    { 
    newLeafNode(this_ZERO_2, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_1_1()); 
    }
)(    this_DIGIT_NONZERO_3=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_3);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_3, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_2_0()); 
    }

    |    this_ZERO_4=RULE_ZERO    {
		$current.merge(this_ZERO_4);
    }

    { 
    newLeafNode(this_ZERO_4, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_2_1()); 
    }
)(    this_DIGIT_NONZERO_5=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_5);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_5, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_3_0()); 
    }

    |    this_ZERO_6=RULE_ZERO    {
		$current.merge(this_ZERO_6);
    }

    { 
    newLeafNode(this_ZERO_6, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_3_1()); 
    }
)(    this_DIGIT_NONZERO_7=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_7);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_7, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_4_0()); 
    }

    |    this_ZERO_8=RULE_ZERO    {
		$current.merge(this_ZERO_8);
    }

    { 
    newLeafNode(this_ZERO_8, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_4_1()); 
    }
)(    this_DIGIT_NONZERO_9=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_9);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_9, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_5_0()); 
    }

    |    this_ZERO_10=RULE_ZERO    {
		$current.merge(this_ZERO_10);
    }

    { 
    newLeafNode(this_ZERO_10, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_5_1()); 
    }
)+)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTermCharacter
entryRuleTermCharacter returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTermCharacterRule()); } 
	 iv_ruleTermCharacter=ruleTermCharacter 
	 { $current=$iv_ruleTermCharacter.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TermCharacter
ruleTermCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_NONZERO_0=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_0);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_0, grammarAccess.getTermCharacterAccess().getDIGIT_NONZEROTerminalRuleCall_0()); 
    }

    |    this_ZERO_1=RULE_ZERO    {
		$current.merge(this_ZERO_1);
    }

    { 
    newLeafNode(this_ZERO_1, grammarAccess.getTermCharacterAccess().getZEROTerminalRuleCall_1()); 
    }

    |    this_LETTER_2=RULE_LETTER    {
		$current.merge(this_LETTER_2);
    }

    { 
    newLeafNode(this_LETTER_2, grammarAccess.getTermCharacterAccess().getLETTERTerminalRuleCall_2()); 
    }

    |    this_SUBTYPE_3=RULE_SUBTYPE    {
		$current.merge(this_SUBTYPE_3);
    }

    { 
    newLeafNode(this_SUBTYPE_3, grammarAccess.getTermCharacterAccess().getSUBTYPETerminalRuleCall_3()); 
    }

    |    this_INCLUSIVE_SUBTYPE_4=RULE_INCLUSIVE_SUBTYPE    {
		$current.merge(this_INCLUSIVE_SUBTYPE_4);
    }

    { 
    newLeafNode(this_INCLUSIVE_SUBTYPE_4, grammarAccess.getTermCharacterAccess().getINCLUSIVE_SUBTYPETerminalRuleCall_4()); 
    }

    |    this_COMMA_5=RULE_COMMA    {
		$current.merge(this_COMMA_5);
    }

    { 
    newLeafNode(this_COMMA_5, grammarAccess.getTermCharacterAccess().getCOMMATerminalRuleCall_5()); 
    }

    |    this_CARET_6=RULE_CARET    {
		$current.merge(this_CARET_6);
    }

    { 
    newLeafNode(this_CARET_6, grammarAccess.getTermCharacterAccess().getCARETTerminalRuleCall_6()); 
    }

    |    this_NOT_TOKEN_7=RULE_NOT_TOKEN    {
		$current.merge(this_NOT_TOKEN_7);
    }

    { 
    newLeafNode(this_NOT_TOKEN_7, grammarAccess.getTermCharacterAccess().getNOT_TOKENTerminalRuleCall_7()); 
    }

    |    this_OPTIONAL_8=RULE_OPTIONAL    {
		$current.merge(this_OPTIONAL_8);
    }

    { 
    newLeafNode(this_OPTIONAL_8, grammarAccess.getTermCharacterAccess().getOPTIONALTerminalRuleCall_8()); 
    }

    |    this_OPENING_CURLY_BRACKET_9=RULE_OPENING_CURLY_BRACKET    {
		$current.merge(this_OPENING_CURLY_BRACKET_9);
    }

    { 
    newLeafNode(this_OPENING_CURLY_BRACKET_9, grammarAccess.getTermCharacterAccess().getOPENING_CURLY_BRACKETTerminalRuleCall_9()); 
    }

    |    this_CLOSING_CURLY_BRACKET_10=RULE_CLOSING_CURLY_BRACKET    {
		$current.merge(this_CLOSING_CURLY_BRACKET_10);
    }

    { 
    newLeafNode(this_CLOSING_CURLY_BRACKET_10, grammarAccess.getTermCharacterAccess().getCLOSING_CURLY_BRACKETTerminalRuleCall_10()); 
    }

    |    this_EQUAL_SIGN_11=RULE_EQUAL_SIGN    {
		$current.merge(this_EQUAL_SIGN_11);
    }

    { 
    newLeafNode(this_EQUAL_SIGN_11, grammarAccess.getTermCharacterAccess().getEQUAL_SIGNTerminalRuleCall_11()); 
    }

    |    this_OPENING_ROUND_BRACKET_12=RULE_OPENING_ROUND_BRACKET    {
		$current.merge(this_OPENING_ROUND_BRACKET_12);
    }

    { 
    newLeafNode(this_OPENING_ROUND_BRACKET_12, grammarAccess.getTermCharacterAccess().getOPENING_ROUND_BRACKETTerminalRuleCall_12()); 
    }

    |    this_CLOSING_ROUND_BRACKET_13=RULE_CLOSING_ROUND_BRACKET    {
		$current.merge(this_CLOSING_ROUND_BRACKET_13);
    }

    { 
    newLeafNode(this_CLOSING_ROUND_BRACKET_13, grammarAccess.getTermCharacterAccess().getCLOSING_ROUND_BRACKETTerminalRuleCall_13()); 
    }

    |    this_PLUS_SIGN_14=RULE_PLUS_SIGN    {
		$current.merge(this_PLUS_SIGN_14);
    }

    { 
    newLeafNode(this_PLUS_SIGN_14, grammarAccess.getTermCharacterAccess().getPLUS_SIGNTerminalRuleCall_14()); 
    }

    |    this_COLON_15=RULE_COLON    {
		$current.merge(this_COLON_15);
    }

    { 
    newLeafNode(this_COLON_15, grammarAccess.getTermCharacterAccess().getCOLONTerminalRuleCall_15()); 
    }

    |    this_PERIOD_16=RULE_PERIOD    {
		$current.merge(this_PERIOD_16);
    }

    { 
    newLeafNode(this_PERIOD_16, grammarAccess.getTermCharacterAccess().getPERIODTerminalRuleCall_16()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTermCharacterAccess().getUnitTypeParserRuleCall_17()); 
    }
    this_UnitType_17=ruleUnitType    {
		$current.merge(this_UnitType_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_AND_TOKEN_18=RULE_AND_TOKEN    {
		$current.merge(this_AND_TOKEN_18);
    }

    { 
    newLeafNode(this_AND_TOKEN_18, grammarAccess.getTermCharacterAccess().getAND_TOKENTerminalRuleCall_18()); 
    }

    |    this_OR_TOKEN_19=RULE_OR_TOKEN    {
		$current.merge(this_OR_TOKEN_19);
    }

    { 
    newLeafNode(this_OR_TOKEN_19, grammarAccess.getTermCharacterAccess().getOR_TOKENTerminalRuleCall_19()); 
    }

    |    this_OPENING_SQUARE_BRACKET_20=RULE_OPENING_SQUARE_BRACKET    {
		$current.merge(this_OPENING_SQUARE_BRACKET_20);
    }

    { 
    newLeafNode(this_OPENING_SQUARE_BRACKET_20, grammarAccess.getTermCharacterAccess().getOPENING_SQUARE_BRACKETTerminalRuleCall_20()); 
    }

    |    this_CLOSING_SQUARE_BRACKET_21=RULE_CLOSING_SQUARE_BRACKET    {
		$current.merge(this_CLOSING_SQUARE_BRACKET_21);
    }

    { 
    newLeafNode(this_CLOSING_SQUARE_BRACKET_21, grammarAccess.getTermCharacterAccess().getCLOSING_SQUARE_BRACKETTerminalRuleCall_21()); 
    }

    |    this_OTHER_ALLOWED_TERM_CHARACTER_22=RULE_OTHER_ALLOWED_TERM_CHARACTER    {
		$current.merge(this_OTHER_ALLOWED_TERM_CHARACTER_22);
    }

    { 
    newLeafNode(this_OTHER_ALLOWED_TERM_CHARACTER_22, grammarAccess.getTermCharacterAccess().getOTHER_ALLOWED_TERM_CHARACTERTerminalRuleCall_22()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleDecimalNumber
entryRuleDecimalNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getDecimalNumberRule()); } 
	 iv_ruleDecimalNumber=ruleDecimalNumber 
	 { $current=$iv_ruleDecimalNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DecimalNumber
ruleDecimalNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((    this_ZERO_0=RULE_ZERO    {
		$current.merge(this_ZERO_0);
    }

    { 
    newLeafNode(this_ZERO_0, grammarAccess.getDecimalNumberAccess().getZEROTerminalRuleCall_0_0()); 
    }

    |(    this_DIGIT_NONZERO_1=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_1);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_1, grammarAccess.getDecimalNumberAccess().getDIGIT_NONZEROTerminalRuleCall_0_1_0()); 
    }
(    this_DIGIT_NONZERO_2=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_2);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_2, grammarAccess.getDecimalNumberAccess().getDIGIT_NONZEROTerminalRuleCall_0_1_1_0()); 
    }

    |    this_ZERO_3=RULE_ZERO    {
		$current.merge(this_ZERO_3);
    }

    { 
    newLeafNode(this_ZERO_3, grammarAccess.getDecimalNumberAccess().getZEROTerminalRuleCall_0_1_1_1()); 
    }
)*))(    this_PERIOD_4=RULE_PERIOD    {
		$current.merge(this_PERIOD_4);
    }

    { 
    newLeafNode(this_PERIOD_4, grammarAccess.getDecimalNumberAccess().getPERIODTerminalRuleCall_1_0()); 
    }
(    this_DIGIT_NONZERO_5=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_5);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_5, grammarAccess.getDecimalNumberAccess().getDIGIT_NONZEROTerminalRuleCall_1_1_0()); 
    }

    |    this_ZERO_6=RULE_ZERO    {
		$current.merge(this_ZERO_6);
    }

    { 
    newLeafNode(this_ZERO_6, grammarAccess.getDecimalNumberAccess().getZEROTerminalRuleCall_1_1_1()); 
    }
)+)?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); } 
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_EQUALS_OPERATOR_0=RULE_EQUALS_OPERATOR    {
		$current.merge(this_EQUALS_OPERATOR_0);
    }

    { 
    newLeafNode(this_EQUALS_OPERATOR_0, grammarAccess.getOperatorAccess().getEQUALS_OPERATORTerminalRuleCall_0()); 
    }

    |    this_SUBTYPE_1=RULE_SUBTYPE    {
		$current.merge(this_SUBTYPE_1);
    }

    { 
    newLeafNode(this_SUBTYPE_1, grammarAccess.getOperatorAccess().getSUBTYPETerminalRuleCall_1()); 
    }

    |    this_GREATER_THAN_OPERATOR_2=RULE_GREATER_THAN_OPERATOR    {
		$current.merge(this_GREATER_THAN_OPERATOR_2);
    }

    { 
    newLeafNode(this_GREATER_THAN_OPERATOR_2, grammarAccess.getOperatorAccess().getGREATER_THAN_OPERATORTerminalRuleCall_2()); 
    }

    |    this_LESS_EQUALS_OPERATOR_3=RULE_LESS_EQUALS_OPERATOR    {
		$current.merge(this_LESS_EQUALS_OPERATOR_3);
    }

    { 
    newLeafNode(this_LESS_EQUALS_OPERATOR_3, grammarAccess.getOperatorAccess().getLESS_EQUALS_OPERATORTerminalRuleCall_3()); 
    }

    |    this_GREATER_EQUALS_OPERATOR_4=RULE_GREATER_EQUALS_OPERATOR    {
		$current.merge(this_GREATER_EQUALS_OPERATOR_4);
    }

    { 
    newLeafNode(this_GREATER_EQUALS_OPERATOR_4, grammarAccess.getOperatorAccess().getGREATER_EQUALS_OPERATORTerminalRuleCall_4()); 
    }

    |    this_NOT_EQUALS_OPERATOR_5=RULE_NOT_EQUALS_OPERATOR    {
		$current.merge(this_NOT_EQUALS_OPERATOR_5);
    }

    { 
    newLeafNode(this_NOT_EQUALS_OPERATOR_5, grammarAccess.getOperatorAccess().getNOT_EQUALS_OPERATORTerminalRuleCall_5()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUnitType
entryRuleUnitType returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getUnitTypeRule()); } 
	 iv_ruleUnitType=ruleUnitType 
	 { $current=$iv_ruleUnitType.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UnitType
ruleUnitType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:

	kw='mg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnitTypeAccess().getMgKeyword()); 
    }

    ;
finally {
	myHiddenTokenState.restore();
}





RULE_ZERO : '0';

RULE_DIGIT_NONZERO : '1'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_SUBTYPE : '<';

RULE_INCLUSIVE_SUBTYPE : '<<';

RULE_EQUALS_OPERATOR : '==';

RULE_GREATER_THAN_OPERATOR : '>';

RULE_LESS_EQUALS_OPERATOR : '<=';

RULE_GREATER_EQUALS_OPERATOR : '>=';

RULE_NOT_EQUALS_OPERATOR : '!=';

RULE_WS : (' '|'\t'|'\n'|'\r');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_PIPE : '|';

RULE_COLON : ':';

RULE_OPENING_CURLY_BRACKET : '{';

RULE_CLOSING_CURLY_BRACKET : '}';

RULE_EQUAL_SIGN : '=';

RULE_COMMA : ',';

RULE_OPENING_ROUND_BRACKET : '(';

RULE_CLOSING_ROUND_BRACKET : ')';

RULE_OPENING_SQUARE_BRACKET : '[';

RULE_CLOSING_SQUARE_BRACKET : ']';

RULE_PLUS_SIGN : '+';

RULE_CARET : '^';

RULE_NOT_TOKEN : '!';

RULE_OPTIONAL : '~';

RULE_PERIOD : '.';

RULE_OTHER_ALLOWED_TERM_CHARACTER : .;

RULE_AND_TOKEN : 'AND';

RULE_OR_TOKEN : 'OR';

RULE_UNION_TOKEN : 'UNION';


