grammar com.b2international.snowowl.dsl.ESCG //hidden(WS, SL_COMMENT, ML_COMMENT)
generate escg "http://www.b2international.com/snowowl/dsl/ESCG"

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore
	
// parser rules
Expression hidden(WS, SL_COMMENT, ML_COMMENT):
	(subExpression+=SubExpression (UNION_TOKEN subExpression+=SubExpression)*)?;

SubExpression:
	lValues+=LValue (PLUS_SIGN lValues+=LValue)* (COLON refinements=Refinements)?;

LValue:
	ConceptGroup | RefSet;

RefSet:
	negated?=NOT_TOKEN? CARET id=ConceptId (PIPE term=Term PIPE)?;
 
//  ! << 1234567|Left hand|
ConceptGroup: 
	negated?=NOT_TOKEN? constraint=(SUBTYPE|INCLUSIVE_SUBTYPE)? concept=Concept;

//  1234567|Left hand|
Concept :
	id=ConceptId (PIPE WS* term=Term WS* PIPE)?;
	
Refinements :
	(attributeSet=AttributeSet (attributeGroups+=AttributeGroup)*) | attributeGroups+=AttributeGroup+;

AttributeGroup :
	OPENING_CURLY_BRACKET AttributeSet CLOSING_CURLY_BRACKET;
	 
AttributeSet :
	attributes+=Attribute (COMMA attributes+=Attribute)*;
	
Attribute : 
	optional?=OPTIONAL? assignment=AttributeAssignment;
	
AttributeAssignment:
	ConceptAssignment | NumericalAssignment | NumericalAssignmentGroup;
	
ConceptAssignment:
	name=LValue EQUAL_SIGN value=RValue;
	
NumericalAssignment:
	name=Concept operator=Operator value=DecimalNumber unit=UnitType;
	
NumericalAssignmentGroup:
	OPENING_SQUARE_BRACKET ingredientConcept=Concept EQUAL_SIGN substance=RValue COMMA numericValue=NumericalAssignment CLOSING_SQUARE_BRACKET;

RValue :
	Or;
	
Or returns RValue:
	And ({Or.left=current} OR_TOKEN right=And)*;
	
And returns RValue:
	TerminalRValue ({And.left=current} AND_TOKEN right=TerminalRValue)*;
	
NegatableSubExpression:
	negated?=NOT_TOKEN? OPENING_ROUND_BRACKET expression=Expression CLOSING_ROUND_BRACKET;
	
TerminalRValue returns RValue:
	OPENING_ROUND_BRACKET RValue CLOSING_ROUND_BRACKET | NegatableSubExpression | LValue ;

	
Term hidden() : (TermCharacter)+ (WS+ (TermCharacter)+)*; 
ConceptId hidden(): DIGIT_NONZERO (DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)+;
TermCharacter hidden() : DIGIT_NONZERO|ZERO|LETTER|SUBTYPE|INCLUSIVE_SUBTYPE|COMMA|CARET|NOT_TOKEN|OPTIONAL|OPENING_CURLY_BRACKET|
	CLOSING_CURLY_BRACKET|EQUAL_SIGN|OPENING_ROUND_BRACKET|CLOSING_ROUND_BRACKET|PLUS_SIGN|COLON|PERIOD|UnitType|
	AND_TOKEN|OR_TOKEN|OPENING_SQUARE_BRACKET|CLOSING_SQUARE_BRACKET|OTHER_ALLOWED_TERM_CHARACTER;
Integer returns ecore::EInt hidden(): ZERO | (DIGIT_NONZERO (DIGIT_NONZERO | ZERO)*) ;
DecimalNumber returns ecore::EBigDecimal hidden(): (ZERO | (DIGIT_NONZERO (DIGIT_NONZERO | ZERO)*))((PERIOD)(DIGIT_NONZERO | ZERO)+)?;
Operator hidden(): EQUALS_OPERATOR | SUBTYPE | GREATER_THAN_OPERATOR | LESS_EQUALS_OPERATOR | GREATER_EQUALS_OPERATOR | NOT_EQUALS_OPERATOR;
UnitType hidden(): 'mg';
	
terminal ZERO : '0';
terminal DIGIT_NONZERO  : '1'..'9';
terminal LETTER : ('a'..'z' | 'A'..'Z');
terminal SUBTYPE : '<';
terminal INCLUSIVE_SUBTYPE : '<<';
terminal EQUALS_OPERATOR : '==';
terminal GREATER_THAN_OPERATOR : '>';
terminal LESS_EQUALS_OPERATOR : '<=';
terminal GREATER_EQUALS_OPERATOR : '>=';
terminal NOT_EQUALS_OPERATOR : '!=';
terminal WS : (' '|'\t'|'\n'|'\r');
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal PIPE : '|';
terminal COLON : ':';
terminal OPENING_CURLY_BRACKET : '{';
terminal CLOSING_CURLY_BRACKET: '}';
terminal EQUAL_SIGN: '=';
terminal COMMA: ',';
terminal OPENING_ROUND_BRACKET : '(';
terminal CLOSING_ROUND_BRACKET : ')';
terminal OPENING_SQUARE_BRACKET : '[';
terminal CLOSING_SQUARE_BRACKET : ']';
terminal PLUS_SIGN : '+';
terminal CARET : '^';
terminal NOT_TOKEN : '!';
terminal OPTIONAL : '~';
terminal PERIOD : '.';
terminal OTHER_ALLOWED_TERM_CHARACTER : .;
terminal AND_TOKEN : 'AND';
terminal OR_TOKEN : 'OR';
terminal UNION_TOKEN : 'UNION';
