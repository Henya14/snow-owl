/*
* generated by Xtext
*/
grammar InternalSCG;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package com.b2international.snowowl.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.b2international.snowowl.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.b2international.snowowl.dsl.services.SCGGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SCGGrammarAccess grammarAccess;
 	
    public InternalSCGParser(TokenStream input, SCGGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	}
   	
   	@Override
   	protected SCGGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getConceptsConceptParserRuleCall_0_0()); 
	    }
		lv_concepts_0_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"concepts",
        		lv_concepts_0_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PLUS_SIGN_1=RULE_PLUS_SIGN
    { 
    newLeafNode(this_PLUS_SIGN_1, grammarAccess.getExpressionAccess().getPLUS_SIGNTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getConceptsConceptParserRuleCall_1_1_0()); 
	    }
		lv_concepts_2_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"concepts",
        		lv_concepts_2_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_COLON_3=RULE_COLON
    { 
    newLeafNode(this_COLON_3, grammarAccess.getExpressionAccess().getCOLONTerminalRuleCall_2_0()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAttributesAttributeParserRuleCall_2_1_0_0()); 
	    }
		lv_attributes_4_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_5=RULE_COMMA
    { 
    newLeafNode(this_COMMA_5, grammarAccess.getExpressionAccess().getCOMMATerminalRuleCall_2_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAttributesAttributeParserRuleCall_2_1_1_1_0()); 
	    }
		lv_attributes_6_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_6_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getGroupsGroupParserRuleCall_2_2_0()); 
	    }
		lv_groups_7_0=ruleGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_7_0, 
        		"Group");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	 iv_ruleConcept=ruleConcept 
	 { $current=$iv_ruleConcept.current; } 
	 EOF 
;

// Rule Concept
ruleConcept returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConceptAccess().getIdConceptIdParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleConceptId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ConceptId");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PIPE_1=RULE_PIPE
    { 
    newLeafNode(this_PIPE_1, grammarAccess.getConceptAccess().getPIPETerminalRuleCall_1_0()); 
    }
(this_WS_2=RULE_WS
    { 
    newLeafNode(this_WS_2, grammarAccess.getConceptAccess().getWSTerminalRuleCall_1_1()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConceptAccess().getTermTermParserRuleCall_1_2_0()); 
	    }
		lv_term_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_WS_4=RULE_WS
    { 
    newLeafNode(this_WS_4, grammarAccess.getConceptAccess().getWSTerminalRuleCall_1_3()); 
    }
)*this_PIPE_5=RULE_PIPE
    { 
    newLeafNode(this_PIPE_5, grammarAccess.getConceptAccess().getPIPETerminalRuleCall_1_4()); 
    }
)?)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_OPENING_CURLY_BRACKET_0=RULE_OPENING_CURLY_BRACKET
    { 
    newLeafNode(this_OPENING_CURLY_BRACKET_0, grammarAccess.getGroupAccess().getOPENING_CURLY_BRACKETTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getAttributesAttributeParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_2=RULE_COMMA
    { 
    newLeafNode(this_COMMA_2, grammarAccess.getGroupAccess().getCOMMATerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getAttributesAttributeParserRuleCall_2_1_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_CLOSING_CURLY_BRACKET_4=RULE_CLOSING_CURLY_BRACKET
    { 
    newLeafNode(this_CLOSING_CURLY_BRACKET_4, grammarAccess.getGroupAccess().getCLOSING_CURLY_BRACKETTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getNameConceptParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Concept");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EQUAL_SIGN_1=RULE_EQUAL_SIGN
    { 
    newLeafNode(this_EQUAL_SIGN_1, grammarAccess.getAttributeAccess().getEQUAL_SIGNTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getValueAttributeValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeValueAccess().getConceptParserRuleCall_0()); 
    }
    this_Concept_0=ruleConcept
    { 
        $current = $this_Concept_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(this_OPENING_ROUND_BRACKET_1=RULE_OPENING_ROUND_BRACKET
    { 
    newLeafNode(this_OPENING_ROUND_BRACKET_1, grammarAccess.getAttributeValueAccess().getOPENING_ROUND_BRACKETTerminalRuleCall_1_0()); 
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeValueAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
this_CLOSING_ROUND_BRACKET_3=RULE_CLOSING_ROUND_BRACKET
    { 
    newLeafNode(this_CLOSING_ROUND_BRACKET_3, grammarAccess.getAttributeValueAccess().getCLOSING_ROUND_BRACKETTerminalRuleCall_1_2()); 
    }
))
;





// Entry rule entryRuleTerm
entryRuleTerm returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Term
ruleTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTermCharacterParserRuleCall_0()); 
    }
    this_TermCharacter_0=ruleTermCharacter    {
		$current.merge(this_TermCharacter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+((    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    newLeafNode(this_WS_1, grammarAccess.getTermAccess().getWSTerminalRuleCall_1_0()); 
    }
)+(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTermCharacterParserRuleCall_1_1()); 
    }
    this_TermCharacter_2=ruleTermCharacter    {
		$current.merge(this_TermCharacter_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConceptId
entryRuleConceptId returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getConceptIdRule()); } 
	 iv_ruleConceptId=ruleConceptId 
	 { $current=$iv_ruleConceptId.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ConceptId
ruleConceptId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_NONZERO_0=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_0);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_0, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_0()); 
    }
(    this_DIGIT_NONZERO_1=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_1);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_1, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_1_0()); 
    }

    |    this_ZERO_2=RULE_ZERO    {
		$current.merge(this_ZERO_2);
    }

    { 
    newLeafNode(this_ZERO_2, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_1_1()); 
    }
)(    this_DIGIT_NONZERO_3=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_3);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_3, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_2_0()); 
    }

    |    this_ZERO_4=RULE_ZERO    {
		$current.merge(this_ZERO_4);
    }

    { 
    newLeafNode(this_ZERO_4, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_2_1()); 
    }
)(    this_DIGIT_NONZERO_5=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_5);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_5, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_3_0()); 
    }

    |    this_ZERO_6=RULE_ZERO    {
		$current.merge(this_ZERO_6);
    }

    { 
    newLeafNode(this_ZERO_6, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_3_1()); 
    }
)(    this_DIGIT_NONZERO_7=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_7);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_7, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_4_0()); 
    }

    |    this_ZERO_8=RULE_ZERO    {
		$current.merge(this_ZERO_8);
    }

    { 
    newLeafNode(this_ZERO_8, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_4_1()); 
    }
)(    this_DIGIT_NONZERO_9=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_9);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_9, grammarAccess.getConceptIdAccess().getDIGIT_NONZEROTerminalRuleCall_5_0()); 
    }

    |    this_ZERO_10=RULE_ZERO    {
		$current.merge(this_ZERO_10);
    }

    { 
    newLeafNode(this_ZERO_10, grammarAccess.getConceptIdAccess().getZEROTerminalRuleCall_5_1()); 
    }
)+)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTermCharacter
entryRuleTermCharacter returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTermCharacterRule()); } 
	 iv_ruleTermCharacter=ruleTermCharacter 
	 { $current=$iv_ruleTermCharacter.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TermCharacter
ruleTermCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_NONZERO_0=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_0);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_0, grammarAccess.getTermCharacterAccess().getDIGIT_NONZEROTerminalRuleCall_0()); 
    }

    |    this_ZERO_1=RULE_ZERO    {
		$current.merge(this_ZERO_1);
    }

    { 
    newLeafNode(this_ZERO_1, grammarAccess.getTermCharacterAccess().getZEROTerminalRuleCall_1()); 
    }

    |    this_LETTER_2=RULE_LETTER    {
		$current.merge(this_LETTER_2);
    }

    { 
    newLeafNode(this_LETTER_2, grammarAccess.getTermCharacterAccess().getLETTERTerminalRuleCall_2()); 
    }

    |    this_COMMA_3=RULE_COMMA    {
		$current.merge(this_COMMA_3);
    }

    { 
    newLeafNode(this_COMMA_3, grammarAccess.getTermCharacterAccess().getCOMMATerminalRuleCall_3()); 
    }

    |    this_OPENING_CURLY_BRACKET_4=RULE_OPENING_CURLY_BRACKET    {
		$current.merge(this_OPENING_CURLY_BRACKET_4);
    }

    { 
    newLeafNode(this_OPENING_CURLY_BRACKET_4, grammarAccess.getTermCharacterAccess().getOPENING_CURLY_BRACKETTerminalRuleCall_4()); 
    }

    |    this_CLOSING_CURLY_BRACKET_5=RULE_CLOSING_CURLY_BRACKET    {
		$current.merge(this_CLOSING_CURLY_BRACKET_5);
    }

    { 
    newLeafNode(this_CLOSING_CURLY_BRACKET_5, grammarAccess.getTermCharacterAccess().getCLOSING_CURLY_BRACKETTerminalRuleCall_5()); 
    }

    |    this_EQUAL_SIGN_6=RULE_EQUAL_SIGN    {
		$current.merge(this_EQUAL_SIGN_6);
    }

    { 
    newLeafNode(this_EQUAL_SIGN_6, grammarAccess.getTermCharacterAccess().getEQUAL_SIGNTerminalRuleCall_6()); 
    }

    |    this_OPENING_ROUND_BRACKET_7=RULE_OPENING_ROUND_BRACKET    {
		$current.merge(this_OPENING_ROUND_BRACKET_7);
    }

    { 
    newLeafNode(this_OPENING_ROUND_BRACKET_7, grammarAccess.getTermCharacterAccess().getOPENING_ROUND_BRACKETTerminalRuleCall_7()); 
    }

    |    this_CLOSING_ROUND_BRACKET_8=RULE_CLOSING_ROUND_BRACKET    {
		$current.merge(this_CLOSING_ROUND_BRACKET_8);
    }

    { 
    newLeafNode(this_CLOSING_ROUND_BRACKET_8, grammarAccess.getTermCharacterAccess().getCLOSING_ROUND_BRACKETTerminalRuleCall_8()); 
    }

    |    this_PLUS_SIGN_9=RULE_PLUS_SIGN    {
		$current.merge(this_PLUS_SIGN_9);
    }

    { 
    newLeafNode(this_PLUS_SIGN_9, grammarAccess.getTermCharacterAccess().getPLUS_SIGNTerminalRuleCall_9()); 
    }

    |    this_COLON_10=RULE_COLON    {
		$current.merge(this_COLON_10);
    }

    { 
    newLeafNode(this_COLON_10, grammarAccess.getTermCharacterAccess().getCOLONTerminalRuleCall_10()); 
    }

    |    this_OTHER_ALLOWED_TERM_CHARACTER_11=RULE_OTHER_ALLOWED_TERM_CHARACTER    {
		$current.merge(this_OTHER_ALLOWED_TERM_CHARACTER_11);
    }

    { 
    newLeafNode(this_OTHER_ALLOWED_TERM_CHARACTER_11, grammarAccess.getTermCharacterAccess().getOTHER_ALLOWED_TERM_CHARACTERTerminalRuleCall_11()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_ZERO : '0';

RULE_DIGIT_NONZERO : '1'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_WS : (' '|'\t'|'\n'|'\r');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_PIPE : '|';

RULE_COLON : ':';

RULE_OPENING_CURLY_BRACKET : '{';

RULE_CLOSING_CURLY_BRACKET : '}';

RULE_EQUAL_SIGN : '=';

RULE_COMMA : ',';

RULE_OPENING_ROUND_BRACKET : '(';

RULE_CLOSING_ROUND_BRACKET : ')';

RULE_PLUS_SIGN : '+';

RULE_OTHER_ALLOWED_TERM_CHARACTER : .;


